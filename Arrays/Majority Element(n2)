#include <iostream>
#include <vector>
using namespace std;

//BRUTE FORCE APPROACH
//T.C = O(N^2)
//We will run a loop that will select the elements of the array one by one.
//Now, for each element, we will run another loop and count its occurrence in the given array.
//If any element occurs more than the floor of (N/2), we will simply return it.

int majorityElementBrute(vector<int> arr){
    int ans = -1;
    int n = arr.size() - 1;
    for(int i = 0; i < n; i++){
        int count = 0;
        for(int j = 0; j < n; j++){
            if(arr[i] == arr[j])
                count++;
        }
        if(count > n/2)
            ans = arr[i];
    }
    return ans;
}

//OPTIMAL APPROACH - MOORES VOTING ALGORITHM
//T.C = O(N) + O(N)
//The element with the most occurrence will remain and the rest will cancel themselves.
int majorityElementOptimal(vector<int>arr){
    int n = arr.size();
    int count = 0;
    int ele = -1; //-1 if no majority element
    for(int i = 0; i < n; i++){
        if(count == 0){
            count = 1;
            ele = arr[i];
        }
        else if(arr[i] == ele){
            count++;
        }
        else if(arr[i] != ele){
            count--;
        }
    }
    int count1 = 0;
    for(int i = 0; i < n; i++){
        if(arr[i] == ele) count1++;
    }
    if(count1 > n/2) return ele;
    return -1;
}

#include <iostream>
using namespace std;

class Queue
{
    int front;
    int rear;
    int currSize;
    int maxSize;
    int *arr;

public:
    Queue(int capacity)
    {
        maxSize = capacity;
        front = -1;
        rear = -1;
        currSize = 0;
        arr = new int[capacity];
    }

    void enqueue(int element)
    {
        if (currSize == maxSize)
        {
            cout << "Queue is full " << endl;
            exit(1);
        }
        if (rear == -1)
        {
            front = 0;
            rear = 0;
        }
        else
        {
            rear = (rear + 1) % maxSize;
        }
        arr[rear] = element;
        cout << element << " is pushed into the queue" << endl;
        currSize++;
    }

    int dequeue()
    {
        if (front == -1)
        {
            cout << "Queue is empty" << endl;
        }

        int popped = arr[front];

        if (currSize == 1)
        {
            front = -1;
            rear = -1;
        }
        else
        {
            front = (front + 1) % maxSize;
        }
        currSize--;
        return popped;
    }

    int top()
    {
        if (front == -1)
        {
            cout << "Queue is Empty" << endl;
            exit(1);
        }
        return arr[front];
    }
};

int main()
{
    Queue q(6);
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(2);
    q.enqueue(4);
    q.enqueue(5);

    cout << "The peek of the queue before deleting any element " << q.top() << endl;
    cout << "The 1st element to be deleted " << q.dequeue() << endl;
    cout << "The peek of the queue after deleting an element " << q.top() << endl;
    cout << "The 2nd element to be deleted " << q.dequeue() << endl;

    return 0;
}
